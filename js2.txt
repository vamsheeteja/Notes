Lec 27

Statements and Expressions

Expressions // return a value

1) 3 + 4 // is an expression
2) 1975
3) true && false && false

Statement // they do not return/executes a value
// it performs some actions.



if(23 > 10) {
	const str = "23 is bigger";
}

=============================================================

L. 28 
Conditional Statement Ternory operator

Syntax:
	const age = 22;
	age >= 18 ? console.log("I like to drink wine"):
	console.log("I like to drink water");

	const drink = age >= 18 ? 'wine':'water';
	const.log(drink);

console.log('I like to drink ${age >= 18 ? 'wine':'water'}');

==============================================================

L. 30

JavaScript is backward compatible.

old features are never removed.

it is not forward compatible.

==============================================================
Section 3
L. 32 Activating strict mode.

it help us to debug the js code.
eg. 
	use strict; // this line must be at the top of the code file
	let ages = 18;
	let res = age >= 18 ? 'yes' : 'no';
	// if strict was not written then we would not get any output. 
	if strict is written then we get the error message.

===============================================================

L. 33 Functions

DRY DONT REPEAT YOURSELF

// 1. can reuse a piece of code.

function logger() {
	// function body
	console.log("my name is bunny")
}

// to call a function/ invoke/ running
logger(); // technically it returns undefined and we dont capture undefined.


// 2. can take data and return data

funciton fruitProcessor(apples, oranges) {
	// console.log(apples, oranges);
	const juice = 'Juice with ${apples} apples and ${oranges} oranges.'
	return juice;
}

const appleJuice = fruitProcessor(5, 0);
console.log(appleJuice);


functions allows us to write more maintainable code as it helps us creating chunks of reusable code.

=====================================================================

L. 34

Functional Declarations Vs Expressions

// a) FUNCTION DECLARATION

// a generic function

function calcAge1(birthYear) {
	return 2022 - birthYear;
}

console.log(calcAge1(2001));

// b) FUNCTION EXPRESSION

const calcAge2 = funtion (birthYear) {
	return 2022 - birthYear;
}

calcAge2(2001);

In javascript function is just a value so we can store it in a variable.


THE MAIN DIFF BW ABOVE TWO IS  THAT

the function declarations can be called before the funtion is defined.

NOTE : in function expression if the name is omitted then it is called as an anonymous funcition.

why named and anonymous function expressions?
ANS: IMP NOTE: if we want to call a function (same/ recursion) inside function then we should write a named function expression.


eg. 

// internally this happens because of hoisting 

console.log(calcAge1(2001));

function calcAge1(birthYear) {
	return 2022 - birthYear;
}

NOTE: 
but we get error if we try to do it with function expressions.

================================================================

L. 35 ARROW FUNTION.

birthYear => 2022 - birthYear;

// this is special form of function expression

code in demo.js file







